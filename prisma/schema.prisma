generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
  editor
  test
}

enum MessageStatus {
  shipped
  read
}

model User {
  id                       Int                @id @default(autoincrement())
  email                    String             @db.VarChar() @unique
  username                 String             @db.VarChar() @unique
  role                     UserRole           @default(user)
  about                    String?            @db.VarChar()
  avatar                   Avatar?
  password                 String             @db.VarChar()
  messages                 Message[]
  rooms                    UserRoom[]
  onlineAt                 DateTime           @default(now()) @db.Timestamp(6) @map("online_at")
  createdAt                DateTime           @default(now()) @db.Timestamp(6) @map("created_at")

  @@map("users")
}

model Avatar {
  src                      String             @db.VarChar()
  blur                     String             @db.VarChar()
  user                     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   Int                @db.Integer @unique

  @@map("avatars")
}

model Room {
  id                       Int                @id @default(autoincrement())
  users                    UserRoom[]
  messages                 Message[]
  createdAt                DateTime           @default(now()) @db.Timestamp(6) @map("created_at")

  @@map("rooms")
}

model Message {
  id                       Int                @id @default(autoincrement())
  text                     String             @db.VarChar()
  status                   MessageStatus      @default(shipped)
  user                     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   Int                @db.Integer @map("user_id")
  room                     Room               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId                   Int                @db.Integer @map("room_id")
  createdAt                DateTime           @default(now()) @db.Timestamp(6) @map("created_at")

  @@map("messages")
}

model UserRoom {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @db.Integer @map("user_id")
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int @db.Integer @map("room_id")

  @@id([userId, roomId])
  @@map("users_rooms")
}